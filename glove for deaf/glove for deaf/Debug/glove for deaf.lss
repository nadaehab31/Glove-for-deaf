
glove for deaf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000930  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800060  00800060  000009a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000227a  00000000  00000000  00000bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  00002e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c45  00000000  00000000  000039c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  0000560c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000862  00000000  00000000  000059b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a93  00000000  00000000  00006216  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00007ca9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e3       	ldi	r30, 0x30	; 48
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <main>
  8a:	0c 94 96 04 	jmp	0x92c	; 0x92c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

#include "ADC.h"
void ADC_Init(void) 
{
	ADCSRA |= (1<<ADEN) ; //enable  ADC
  92:	86 b1       	in	r24, 0x06	; 6
  94:	80 68       	ori	r24, 0x80	; 128
  96:	86 b9       	out	0x06, r24	; 6
 	SetBit(ADMUX,REFS0) ; //set Vref to Vcc
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	87 b9       	out	0x07, r24	; 7
 	ClearBit(ADMUX,REFS1); //set Vref to Vcc
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 77       	andi	r24, 0x7F	; 127
  a2:	87 b9       	out	0x07, r24	; 7

	ClearBit(ADCSRA,ADPS1);
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	8d 7f       	andi	r24, 0xFD	; 253
  a8:	86 b9       	out	0x06, r24	; 6
    SetBit(ADCSRA,ADPS0);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	86 b9       	out	0x06, r24	; 6
	SetBit(ADCSRA,ADPS2);
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	86 b9       	out	0x06, r24	; 6
  b6:	08 95       	ret

000000b8 <ADC_ChannelInit>:

	//ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);  //conversion set to 128
}

void ADC_ChannelInit(uint8 ADC_Channel)
{
  b8:	cf 93       	push	r28
  ba:	c8 2f       	mov	r28, r24
	
			Dio_PinSetDirection(A,ADC_Channel,PinInput);   //set input channel 
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	68 2f       	mov	r22, r24
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 7d 00 	call	0xfa	; 0xfa <Dio_PinSetDirection>
			ADMUX= (ADMUX & ~0x1F) | (ADC_Channel & 0x1F) ;    //bits for setting the required channel  (clear ADMUX then setting required channel)
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	80 7e       	andi	r24, 0xE0	; 224
  ca:	cf 71       	andi	r28, 0x1F	; 31
  cc:	c8 2b       	or	r28, r24
  ce:	c7 b9       	out	0x07, r28	; 7
	
}
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <ADC_ReadChannel>:
void ADC_ReadChannel(uint8 ADC_Channel , uint16* Adc_Data)
{
	ADCSRA |= (1<<ADSC) ;  //activate conversion bit
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	86 b9       	out	0x06, r24	; 6
	while (GetBit(ADCSRA,ADIF) == 0);  //wait for conversion
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <ADC_ReadChannel+0x6>
	*Adc_Data = ADCL ;
  de:	84 b1       	in	r24, 0x04	; 4
  e0:	28 2f       	mov	r18, r24
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	fb 01       	movw	r30, r22
  e6:	31 83       	std	Z+1, r19	; 0x01
  e8:	20 83       	st	Z, r18
	*Adc_Data |= (uint16) (ADCH<<8) ;   //read value from register;
  ea:	45 b1       	in	r20, 0x05	; 5
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	94 2f       	mov	r25, r20
  f0:	82 2b       	or	r24, r18
  f2:	93 2b       	or	r25, r19
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <Dio_PinSetDirection>:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
	return ReturnValue;
}
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	31 f1       	breq	.+76     	; 0x14a <Dio_PinSetDirection+0x50>
  fe:	38 f0       	brcs	.+14     	; 0x10e <Dio_PinSetDirection+0x14>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	09 f4       	brne	.+2      	; 0x106 <Dio_PinSetDirection+0xc>
 104:	40 c0       	rjmp	.+128    	; 0x186 <Dio_PinSetDirection+0x8c>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	09 f4       	brne	.+2      	; 0x10c <Dio_PinSetDirection+0x12>
 10a:	5a c0       	rjmp	.+180    	; 0x1c0 <Dio_PinSetDirection+0xc6>
 10c:	76 c0       	rjmp	.+236    	; 0x1fa <Dio_PinSetDirection+0x100>
 10e:	41 11       	cpse	r20, r1
 110:	0d c0       	rjmp	.+26     	; 0x12c <Dio_PinSetDirection+0x32>
 112:	2a b3       	in	r18, 0x1a	; 26
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <Dio_PinSetDirection+0x24>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <Dio_PinSetDirection+0x20>
 122:	80 95       	com	r24
 124:	82 23       	and	r24, r18
 126:	8a bb       	out	0x1a, r24	; 26
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	08 95       	ret
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	09 f0       	breq	.+2      	; 0x132 <Dio_PinSetDirection+0x38>
 130:	66 c0       	rjmp	.+204    	; 0x1fe <Dio_PinSetDirection+0x104>
 132:	2a b3       	in	r18, 0x1a	; 26
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <Dio_PinSetDirection+0x44>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <Dio_PinSetDirection+0x40>
 142:	82 2b       	or	r24, r18
 144:	8a bb       	out	0x1a, r24	; 26
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	08 95       	ret
 14a:	41 11       	cpse	r20, r1
 14c:	0d c0       	rjmp	.+26     	; 0x168 <Dio_PinSetDirection+0x6e>
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <Dio_PinSetDirection+0x60>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Dio_PinSetDirection+0x5c>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	87 bb       	out	0x17, r24	; 23
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <Dio_PinSetDirection+0x74>
 16c:	4a c0       	rjmp	.+148    	; 0x202 <Dio_PinSetDirection+0x108>
 16e:	27 b3       	in	r18, 0x17	; 23
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <Dio_PinSetDirection+0x80>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <Dio_PinSetDirection+0x7c>
 17e:	82 2b       	or	r24, r18
 180:	87 bb       	out	0x17, r24	; 23
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	08 95       	ret
 186:	41 11       	cpse	r20, r1
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <Dio_PinSetDirection+0xaa>
 18a:	24 b3       	in	r18, 0x14	; 20
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <Dio_PinSetDirection+0x9c>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <Dio_PinSetDirection+0x98>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	84 bb       	out	0x14, r24	; 20
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	08 95       	ret
 1a4:	41 30       	cpi	r20, 0x01	; 1
 1a6:	79 f5       	brne	.+94     	; 0x206 <Dio_PinSetDirection+0x10c>
 1a8:	24 b3       	in	r18, 0x14	; 20
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Dio_PinSetDirection+0xba>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <Dio_PinSetDirection+0xb6>
 1b8:	82 2b       	or	r24, r18
 1ba:	84 bb       	out	0x14, r24	; 20
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	08 95       	ret
 1c0:	41 11       	cpse	r20, r1
 1c2:	0d c0       	rjmp	.+26     	; 0x1de <Dio_PinSetDirection+0xe4>
 1c4:	21 b3       	in	r18, 0x11	; 17
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <Dio_PinSetDirection+0xd6>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <Dio_PinSetDirection+0xd2>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	81 bb       	out	0x11, r24	; 17
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	08 95       	ret
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	a1 f4       	brne	.+40     	; 0x20a <Dio_PinSetDirection+0x110>
 1e2:	21 b3       	in	r18, 0x11	; 17
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Dio_PinSetDirection+0xf4>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <Dio_PinSetDirection+0xf0>
 1f2:	82 2b       	or	r24, r18
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	08 95       	ret
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret

0000020e <Dio_GroupSetDirection>:
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	79 f0       	breq	.+30     	; 0x230 <Dio_GroupSetDirection+0x22>
 212:	28 f0       	brcs	.+10     	; 0x21e <Dio_GroupSetDirection+0x10>
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	a9 f0       	breq	.+42     	; 0x242 <Dio_GroupSetDirection+0x34>
 218:	83 30       	cpi	r24, 0x03	; 3
 21a:	e1 f0       	breq	.+56     	; 0x254 <Dio_GroupSetDirection+0x46>
 21c:	24 c0       	rjmp	.+72     	; 0x266 <Dio_GroupSetDirection+0x58>
 21e:	8a b3       	in	r24, 0x1a	; 26
 220:	96 2f       	mov	r25, r22
 222:	90 95       	com	r25
 224:	89 23       	and	r24, r25
 226:	64 23       	and	r22, r20
 228:	68 2b       	or	r22, r24
 22a:	6a bb       	out	0x1a, r22	; 26
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	1c c0       	rjmp	.+56     	; 0x268 <Dio_GroupSetDirection+0x5a>
 230:	87 b3       	in	r24, 0x17	; 23
 232:	96 2f       	mov	r25, r22
 234:	90 95       	com	r25
 236:	89 23       	and	r24, r25
 238:	64 23       	and	r22, r20
 23a:	68 2b       	or	r22, r24
 23c:	67 bb       	out	0x17, r22	; 23
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	13 c0       	rjmp	.+38     	; 0x268 <Dio_GroupSetDirection+0x5a>
 242:	84 b3       	in	r24, 0x14	; 20
 244:	96 2f       	mov	r25, r22
 246:	90 95       	com	r25
 248:	89 23       	and	r24, r25
 24a:	64 23       	and	r22, r20
 24c:	68 2b       	or	r22, r24
 24e:	64 bb       	out	0x14, r22	; 20
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0a c0       	rjmp	.+20     	; 0x268 <Dio_GroupSetDirection+0x5a>
 254:	81 b3       	in	r24, 0x11	; 17
 256:	96 2f       	mov	r25, r22
 258:	90 95       	com	r25
 25a:	89 23       	and	r24, r25
 25c:	64 23       	and	r22, r20
 25e:	68 2b       	or	r22, r24
 260:	61 bb       	out	0x11, r22	; 17
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	01 c0       	rjmp	.+2      	; 0x268 <Dio_GroupSetDirection+0x5a>
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	00 00       	nop
 26a:	08 95       	ret

0000026c <Dio_PortWrite>:
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	49 f0       	breq	.+18     	; 0x282 <Dio_PortWrite+0x16>
 270:	28 f0       	brcs	.+10     	; 0x27c <Dio_PortWrite+0x10>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	49 f0       	breq	.+18     	; 0x288 <Dio_PortWrite+0x1c>
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	51 f0       	breq	.+20     	; 0x28e <Dio_PortWrite+0x22>
 27a:	0c c0       	rjmp	.+24     	; 0x294 <Dio_PortWrite+0x28>
 27c:	6b bb       	out	0x1b, r22	; 27
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0a c0       	rjmp	.+20     	; 0x296 <Dio_PortWrite+0x2a>
 282:	68 bb       	out	0x18, r22	; 24
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	07 c0       	rjmp	.+14     	; 0x296 <Dio_PortWrite+0x2a>
 288:	65 bb       	out	0x15, r22	; 21
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	04 c0       	rjmp	.+8      	; 0x296 <Dio_PortWrite+0x2a>
 28e:	62 bb       	out	0x12, r22	; 18
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	01 c0       	rjmp	.+2      	; 0x296 <Dio_PortWrite+0x2a>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <Dio_PinWrite>:
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	31 f1       	breq	.+76     	; 0x2ea <Dio_PinWrite+0x50>
 29e:	38 f0       	brcs	.+14     	; 0x2ae <Dio_PinWrite+0x14>
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <Dio_PinWrite+0xc>
 2a4:	40 c0       	rjmp	.+128    	; 0x326 <Dio_PinWrite+0x8c>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	09 f4       	brne	.+2      	; 0x2ac <Dio_PinWrite+0x12>
 2aa:	5a c0       	rjmp	.+180    	; 0x360 <Dio_PinWrite+0xc6>
 2ac:	76 c0       	rjmp	.+236    	; 0x39a <Dio_PinWrite+0x100>
 2ae:	41 11       	cpse	r20, r1
 2b0:	0d c0       	rjmp	.+26     	; 0x2cc <Dio_PinWrite+0x32>
 2b2:	2b b3       	in	r18, 0x1b	; 27
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <Dio_PinWrite+0x24>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <Dio_PinWrite+0x20>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	70 c0       	rjmp	.+224    	; 0x3ac <Dio_PinWrite+0x112>
 2cc:	41 30       	cpi	r20, 0x01	; 1
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <Dio_PinWrite+0x38>
 2d0:	66 c0       	rjmp	.+204    	; 0x39e <Dio_PinWrite+0x104>
 2d2:	2b b3       	in	r18, 0x1b	; 27
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <Dio_PinWrite+0x44>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <Dio_PinWrite+0x40>
 2e2:	82 2b       	or	r24, r18
 2e4:	8b bb       	out	0x1b, r24	; 27
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	61 c0       	rjmp	.+194    	; 0x3ac <Dio_PinWrite+0x112>
 2ea:	41 11       	cpse	r20, r1
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <Dio_PinWrite+0x6e>
 2ee:	28 b3       	in	r18, 0x18	; 24
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <Dio_PinWrite+0x60>
 2f6:	88 0f       	add	r24, r24
 2f8:	99 1f       	adc	r25, r25
 2fa:	6a 95       	dec	r22
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <Dio_PinWrite+0x5c>
 2fe:	80 95       	com	r24
 300:	82 23       	and	r24, r18
 302:	88 bb       	out	0x18, r24	; 24
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	52 c0       	rjmp	.+164    	; 0x3ac <Dio_PinWrite+0x112>
 308:	41 30       	cpi	r20, 0x01	; 1
 30a:	09 f0       	breq	.+2      	; 0x30e <Dio_PinWrite+0x74>
 30c:	4a c0       	rjmp	.+148    	; 0x3a2 <Dio_PinWrite+0x108>
 30e:	28 b3       	in	r18, 0x18	; 24
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <Dio_PinWrite+0x80>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Dio_PinWrite+0x7c>
 31e:	82 2b       	or	r24, r18
 320:	88 bb       	out	0x18, r24	; 24
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	43 c0       	rjmp	.+134    	; 0x3ac <Dio_PinWrite+0x112>
 326:	41 11       	cpse	r20, r1
 328:	0d c0       	rjmp	.+26     	; 0x344 <Dio_PinWrite+0xaa>
 32a:	25 b3       	in	r18, 0x15	; 21
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <Dio_PinWrite+0x9c>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <Dio_PinWrite+0x98>
 33a:	80 95       	com	r24
 33c:	82 23       	and	r24, r18
 33e:	85 bb       	out	0x15, r24	; 21
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	34 c0       	rjmp	.+104    	; 0x3ac <Dio_PinWrite+0x112>
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	79 f5       	brne	.+94     	; 0x3a6 <Dio_PinWrite+0x10c>
 348:	25 b3       	in	r18, 0x15	; 21
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <Dio_PinWrite+0xba>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <Dio_PinWrite+0xb6>
 358:	82 2b       	or	r24, r18
 35a:	85 bb       	out	0x15, r24	; 21
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	26 c0       	rjmp	.+76     	; 0x3ac <Dio_PinWrite+0x112>
 360:	41 11       	cpse	r20, r1
 362:	0d c0       	rjmp	.+26     	; 0x37e <Dio_PinWrite+0xe4>
 364:	22 b3       	in	r18, 0x12	; 18
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <Dio_PinWrite+0xd6>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <Dio_PinWrite+0xd2>
 374:	80 95       	com	r24
 376:	82 23       	and	r24, r18
 378:	82 bb       	out	0x12, r24	; 18
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	17 c0       	rjmp	.+46     	; 0x3ac <Dio_PinWrite+0x112>
 37e:	41 30       	cpi	r20, 0x01	; 1
 380:	a1 f4       	brne	.+40     	; 0x3aa <Dio_PinWrite+0x110>
 382:	22 b3       	in	r18, 0x12	; 18
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <Dio_PinWrite+0xf4>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <Dio_PinWrite+0xf0>
 392:	82 2b       	or	r24, r18
 394:	82 bb       	out	0x12, r24	; 18
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	09 c0       	rjmp	.+18     	; 0x3ac <Dio_PinWrite+0x112>
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <Dio_PinWrite+0x112>
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <Dio_PinWrite+0x112>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	03 c0       	rjmp	.+6      	; 0x3ac <Dio_PinWrite+0x112>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <Dio_PinWrite+0x112>
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	00 00       	nop
 3ae:	08 95       	ret

000003b0 <Dio_PinPullupState>:
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
	switch (port)
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	31 f1       	breq	.+76     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3b4:	38 f0       	brcs	.+14     	; 0x3c4 <Dio_PinPullupState+0x14>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	09 f4       	brne	.+2      	; 0x3bc <Dio_PinPullupState+0xc>
 3ba:	40 c0       	rjmp	.+128    	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	09 f4       	brne	.+2      	; 0x3c2 <Dio_PinPullupState+0x12>
 3c0:	5a c0       	rjmp	.+180    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 3c2:	76 c0       	rjmp	.+236    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
	{
		case A:
		if (PullupState == Deactive) ClearBit(PORTA,PinNumber);
 3c4:	41 11       	cpse	r20, r1
 3c6:	0d c0       	rjmp	.+26     	; 0x3e2 <Dio_PinPullupState+0x32>
 3c8:	2b b3       	in	r18, 0x1b	; 27
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <Dio_PinPullupState+0x24>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <Dio_PinPullupState+0x20>
 3d8:	80 95       	com	r24
 3da:	82 23       	and	r24, r18
 3dc:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	70 c0       	rjmp	.+224    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
	switch (port)
	{
		case A:
		if (PullupState == Deactive) ClearBit(PORTA,PinNumber);
		else if (PullupState == Active) SetBit(PORTA,PinNumber);
 3e2:	41 30       	cpi	r20, 0x01	; 1
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <Dio_PinPullupState+0x38>
 3e6:	66 c0       	rjmp	.+204    	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 3e8:	2b b3       	in	r18, 0x1b	; 27
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <Dio_PinPullupState+0x44>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <Dio_PinPullupState+0x40>
 3f8:	82 2b       	or	r24, r18
 3fa:	8b bb       	out	0x1b, r24	; 27
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	61 c0       	rjmp	.+194    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		else if (PullupState == Active) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
 400:	41 11       	cpse	r20, r1
 402:	0d c0       	rjmp	.+26     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 404:	28 b3       	in	r18, 0x18	; 24
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	52 c0       	rjmp	.+164    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		else ReturnValue = NOK ;
		
		break;
		case B:
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	4a c0       	rjmp	.+148    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 424:	28 b3       	in	r18, 0x18	; 24
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	6a 95       	dec	r22
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	82 2b       	or	r24, r18
 436:	88 bb       	out	0x18, r24	; 24
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	43 c0       	rjmp	.+134    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
 43c:	41 11       	cpse	r20, r1
 43e:	0d c0       	rjmp	.+26     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 440:	25 b3       	in	r18, 0x15	; 21
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	6a 95       	dec	r22
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	82 23       	and	r24, r18
 454:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	34 c0       	rjmp	.+104    	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
		break;
		case C:
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
 45a:	41 30       	cpi	r20, 0x01	; 1
 45c:	79 f5       	brne	.+94     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 45e:	25 b3       	in	r18, 0x15	; 21
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	82 2b       	or	r24, r18
 470:	85 bb       	out	0x15, r24	; 21
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	26 c0       	rjmp	.+76     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
 476:	41 11       	cpse	r20, r1
 478:	0d c0       	rjmp	.+26     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 47a:	22 b3       	in	r18, 0x12	; 18
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	80 95       	com	r24
 48c:	82 23       	and	r24, r18
 48e:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	17 c0       	rjmp	.+46     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
		break;
		case D:
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
		else if (PullupState == Active) SetBit(PORTD,PinNumber);
 494:	41 30       	cpi	r20, 0x01	; 1
 496:	a1 f4       	brne	.+40     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 498:	22 b3       	in	r18, 0x12	; 18
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a8:	82 2b       	or	r24, r18
 4aa:	82 bb       	out	0x12, r24	; 18
	asm	volatile ("nop"); 
	return ReturnValue;
}
ReturnValueType Dio_PinPullupState (PortType port ,uint8 PinNumber ,PullupStateType PullupState)
{
	ReturnValueType  ReturnValue = OK;
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	09 c0       	rjmp	.+18     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
		else if (PullupState == Active) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
		break;
		default:
		ReturnValue = NOK ;
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
	switch (port)
	{
		case A:
		if (PullupState == Deactive) ClearBit(PORTA,PinNumber);
		else if (PullupState == Active) SetBit(PORTA,PinNumber);
		else ReturnValue = NOK ;
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		
		break;
		case B:
		if (PullupState == Deactive) ClearBit(PORTB,PinNumber);
		else if (PullupState == Active) SetBit(PORTB,PinNumber);
		else ReturnValue = NOK ;
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		break;
		case C:
		if (PullupState == Deactive) ClearBit(PORTC,PinNumber);
		else if (PullupState == Active) SetBit(PORTC,PinNumber);
		else ReturnValue = NOK ;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
		break;
		case D:
		if (PullupState == Deactive) ClearBit(PORTD,PinNumber);
		else if (PullupState == Active) SetBit(PORTD,PinNumber);
		else ReturnValue = NOK ;
 4c0:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		ReturnValue = NOK ;
		break;
	}
	asm	volatile ("nop"); 
 4c2:	00 00       	nop
	return ReturnValue;
}
 4c4:	08 95       	ret

000004c6 <LCD_Enable>:
	Dio_PortWrite(LCDD_Port,SendValue) ;
	LCD_Enable();
}	
void LCD_Enable(void)
{
	Dio_PinWrite(LCDC_Port,LCD_E,PinHigh);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d0:	8f e3       	ldi	r24, 0x3F	; 63
 4d2:	9c e9       	ldi	r25, 0x9C	; 156
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_Enable+0xe>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_Enable+0x14>
 4da:	00 00       	nop
	_delay_ms(10);
	Dio_PinWrite(LCDC_Port,LCD_E,PinLow);    
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
 4e6:	08 95       	ret

000004e8 <LCD_Command>:
	LCD_Command(DisplayOnCursorOff); 
	LCD_Command(ShiftCursorRight); 
	LCD_Command(ClearDispaly); 
	}
void LCD_Command(uint8 command)
{
 4e8:	cf 93       	push	r28
 4ea:	c8 2f       	mov	r28, r24
	Dio_PinWrite(LCDC_Port,LCD_RS,PinLow);
 4ec:	40 e0       	ldi	r20, 0x00	; 0
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	uint8 SendValue = (command & LCD_Mask) | (LCDD_PORTREG & ~LCD_Mask);
 4f6:	6b b3       	in	r22, 0x1b	; 27
 4f8:	8c 2f       	mov	r24, r28
 4fa:	80 7f       	andi	r24, 0xF0	; 240
 4fc:	6f 70       	andi	r22, 0x0F	; 15
 4fe:	68 2b       	or	r22, r24
	Dio_PortWrite(LCDD_Port,SendValue) ;
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 36 01 	call	0x26c	; 0x26c <Dio_PortWrite>
	LCD_Enable();
 506:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_Enable>
	SendValue = (command<<LCD_Align ) |  (LCDD_PORTREG & ~LCD_Mask);
 50a:	20 e1       	ldi	r18, 0x10	; 16
 50c:	c2 9f       	mul	r28, r18
 50e:	c0 01       	movw	r24, r0
 510:	11 24       	eor	r1, r1
 512:	6b b3       	in	r22, 0x1b	; 27
 514:	6f 70       	andi	r22, 0x0F	; 15
 516:	68 2b       	or	r22, r24
	Dio_PortWrite(LCDD_Port,SendValue) ;
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 36 01 	call	0x26c	; 0x26c <Dio_PortWrite>
	LCD_Enable(); 
 51e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_Enable>
}
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <LCD_Init>:

#include "LCD.h"
void LCD_Init(void)
{
	Dio_GroupSetDirection(LCDC_Port,LCDC_Mask,LCDC_Mask); 
 526:	4e e0       	ldi	r20, 0x0E	; 14
 528:	6e e0       	ldi	r22, 0x0E	; 14
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	0e 94 07 01 	call	0x20e	; 0x20e <Dio_GroupSetDirection>
	Dio_GroupSetDirection(LCDD_Port,LCD_Mask,LCD_Mask);     
 530:	40 ef       	ldi	r20, 0xF0	; 240
 532:	60 ef       	ldi	r22, 0xF0	; 240
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	0e 94 07 01 	call	0x20e	; 0x20e <Dio_GroupSetDirection>
	LCD_Command(LCD_4BitMode1);
 53a:	83 e3       	ldi	r24, 0x33	; 51
 53c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
	LCD_Command(LCD_4BitMode2);
 540:	82 e3       	ldi	r24, 0x32	; 50
 542:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
	LCD_Command(LCD_2Lines5X8_4BitMode); 
 546:	88 e2       	ldi	r24, 0x28	; 40
 548:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
	LCD_Command(DisplayOnCursorOff); 
 54c:	8c e0       	ldi	r24, 0x0C	; 12
 54e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
	LCD_Command(ShiftCursorRight); 
 552:	86 e0       	ldi	r24, 0x06	; 6
 554:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
	LCD_Command(ClearDispaly); 
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
 55e:	08 95       	ret

00000560 <LCD_Data>:
	SendValue = (command<<LCD_Align ) |  (LCDD_PORTREG & ~LCD_Mask);
	Dio_PortWrite(LCDD_Port,SendValue) ;
	LCD_Enable(); 
}
void LCD_Data(uint8 Data)
{
 560:	cf 93       	push	r28
 562:	c8 2f       	mov	r28, r24
	Dio_PinWrite(LCDC_Port,LCD_RS,PinHigh); 
 564:	41 e0       	ldi	r20, 0x01	; 1
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	uint8 SendValue = (Data & LCD_Mask) | (LCDD_PORTREG & ~LCD_Mask);
 56e:	6b b3       	in	r22, 0x1b	; 27
 570:	8c 2f       	mov	r24, r28
 572:	80 7f       	andi	r24, 0xF0	; 240
 574:	6f 70       	andi	r22, 0x0F	; 15
 576:	68 2b       	or	r22, r24
	Dio_PortWrite(LCDD_Port,SendValue) ;
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 36 01 	call	0x26c	; 0x26c <Dio_PortWrite>
	LCD_Enable();
 57e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_Enable>
	SendValue = (Data<<LCD_Align ) |  (LCDD_PORTREG & ~LCD_Mask);
 582:	20 e1       	ldi	r18, 0x10	; 16
 584:	c2 9f       	mul	r28, r18
 586:	c0 01       	movw	r24, r0
 588:	11 24       	eor	r1, r1
 58a:	6b b3       	in	r22, 0x1b	; 27
 58c:	6f 70       	andi	r22, 0x0F	; 15
 58e:	68 2b       	or	r22, r24
	Dio_PortWrite(LCDD_Port,SendValue) ;
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	0e 94 36 01 	call	0x26c	; 0x26c <Dio_PortWrite>
	LCD_Enable();
 596:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_Enable>
}	
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <LCD_DataString>:
	Dio_PinWrite(LCDC_Port,LCD_E,PinHigh);
	_delay_ms(10);
	Dio_PinWrite(LCDC_Port,LCD_E,PinLow);    
}
void LCD_DataString(uint8* DataString)
{
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ec 01       	movw	r28, r24
	while (*DataString)
 5a4:	03 c0       	rjmp	.+6      	; 0x5ac <LCD_DataString+0xe>
	{
		LCD_Data(*DataString++);
 5a6:	21 96       	adiw	r28, 0x01	; 1
 5a8:	0e 94 b0 02 	call	0x560	; 0x560 <LCD_Data>
	_delay_ms(10);
	Dio_PinWrite(LCDC_Port,LCD_E,PinLow);    
}
void LCD_DataString(uint8* DataString)
{
	while (*DataString)
 5ac:	88 81       	ld	r24, Y
 5ae:	81 11       	cpse	r24, r1
 5b0:	fa cf       	rjmp	.-12     	; 0x5a6 <LCD_DataString+0x8>
	{
		LCD_Data(*DataString++);
	}
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <LCD_Postion>:
	// Row 1 starts from 0x80 through 0x8f
	// Row 2 starts from 0xC0 through 0xCf
	
	uint8 Position = 0;
	
	switch (Row)
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	19 f0       	breq	.+6      	; 0x5c2 <LCD_Postion+0xa>
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	21 f0       	breq	.+8      	; 0x5c8 <LCD_Postion+0x10>
 5c0:	06 c0       	rjmp	.+12     	; 0x5ce <LCD_Postion+0x16>
	{
		case 0x01:
		Position = 0x80+ Column-1 ;
 5c2:	8f e7       	ldi	r24, 0x7F	; 127
 5c4:	86 0f       	add	r24, r22
		break;
 5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <LCD_Postion+0x18>
		case 0x02:
		Position = 0xC0+ Column-1 ;
 5c8:	8f eb       	ldi	r24, 0xBF	; 191
 5ca:	86 0f       	add	r24, r22
		break;
 5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <LCD_Postion+0x18>
		default:
		Position = 0x80 ;
 5ce:	80 e8       	ldi	r24, 0x80	; 128
		break;
	}
	LCD_Command(Position);
 5d0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
 5d4:	08 95       	ret

000005d6 <main>:


int main(void)
{	//setting ADC interrupt
	
	  ADC_Init();
 5d6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	  ADC_ChannelInit(0);  
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_ChannelInit>
	  LCD_Init();
 5e0:	0e 94 93 02 	call	0x526	; 0x526 <LCD_Init>
	  sei();  //enable all interrupts
 5e4:	78 94       	sei
	  SetBit(ADCSRA,ADIE); //enable ADC interrupt
 5e6:	86 b1       	in	r24, 0x06	; 6
 5e8:	88 60       	ori	r24, 0x08	; 8
 5ea:	86 b9       	out	0x06, r24	; 6
	  SetBit(ADCSRA,ADSC);
 5ec:	86 b1       	in	r24, 0x06	; 6
 5ee:	80 64       	ori	r24, 0x40	; 64
 5f0:	86 b9       	out	0x06, r24	; 6
      
	
	//setting selector pins as outputs
	
	Dio_PinSetDirection(B,0,PinOutput);  //Selector0
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	0e 94 7d 00 	call	0xfa	; 0xfa <Dio_PinSetDirection>
	Dio_PinSetDirection(D,6,PinOutput); //Selector1
 5fc:	41 e0       	ldi	r20, 0x01	; 1
 5fe:	66 e0       	ldi	r22, 0x06	; 6
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	0e 94 7d 00 	call	0xfa	; 0xfa <Dio_PinSetDirection>
	Dio_PinSetDirection(D,2,PinOutput); //Selector2
 606:	41 e0       	ldi	r20, 0x01	; 1
 608:	62 e0       	ldi	r22, 0x02	; 2
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	0e 94 7d 00 	call	0xfa	; 0xfa <Dio_PinSetDirection>
	Dio_PinPullupState(B,0,Active);
 610:	41 e0       	ldi	r20, 0x01	; 1
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_PinPullupState>
	Dio_PinPullupState(D,6,Active);
 61a:	41 e0       	ldi	r20, 0x01	; 1
 61c:	66 e0       	ldi	r22, 0x06	; 6
 61e:	83 e0       	ldi	r24, 0x03	; 3
 620:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_PinPullupState>
	Dio_PinPullupState(D,2,Active);
 624:	41 e0       	ldi	r20, 0x01	; 1
 626:	62 e0       	ldi	r22, 0x02	; 2
 628:	83 e0       	ldi	r24, 0x03	; 3
 62a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <Dio_PinPullupState>

   
	Sign_ClearAll();
 62e:	0e 94 43 04 	call	0x886	; 0x886 <Sign_ClearAll>
 632:	ff cf       	rjmp	.-2      	; 0x632 <main+0x5c>

00000634 <__vector_16>:
    }
}


ISR(ADC_vect)
{ 
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	2f 93       	push	r18
 640:	3f 93       	push	r19
 642:	4f 93       	push	r20
 644:	5f 93       	push	r21
 646:	6f 93       	push	r22
 648:	7f 93       	push	r23
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	af 93       	push	r26
 650:	bf 93       	push	r27
 652:	ef 93       	push	r30
 654:	ff 93       	push	r31
	    Sign_Read();
 656:	0e 94 c1 03 	call	0x782	; 0x782 <Sign_Read>
        Sign_Values();
 65a:	0e 94 17 04 	call	0x82e	; 0x82e <Sign_Values>
 65e:	2f ef       	ldi	r18, 0xFF	; 255
 660:	87 ea       	ldi	r24, 0xA7	; 167
 662:	91 e6       	ldi	r25, 0x61	; 97
 664:	21 50       	subi	r18, 0x01	; 1
 666:	80 40       	sbci	r24, 0x00	; 0
 668:	90 40       	sbci	r25, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <__vector_16+0x30>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <__vector_16+0x3a>
 66e:	00 00       	nop
		//Sign_Represent();
	    _delay_ms(2000);
}
 670:	ff 91       	pop	r31
 672:	ef 91       	pop	r30
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <Selector_Set>:
	}
}

void Selector_Set(uint8 Selector_Value)
{
	switch(Selector_Value)
 692:	82 30       	cpi	r24, 0x02	; 2
 694:	b9 f1       	breq	.+110    	; 0x704 <Selector_Set+0x72>
 696:	28 f4       	brcc	.+10     	; 0x6a2 <Selector_Set+0x10>
 698:	88 23       	and	r24, r24
 69a:	51 f0       	breq	.+20     	; 0x6b0 <Selector_Set+0x1e>
 69c:	81 30       	cpi	r24, 0x01	; 1
 69e:	e9 f0       	breq	.+58     	; 0x6da <Selector_Set+0x48>
 6a0:	08 95       	ret
 6a2:	83 30       	cpi	r24, 0x03	; 3
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <Selector_Set+0x16>
 6a6:	43 c0       	rjmp	.+134    	; 0x72e <Selector_Set+0x9c>
 6a8:	84 30       	cpi	r24, 0x04	; 4
 6aa:	09 f4       	brne	.+2      	; 0x6ae <Selector_Set+0x1c>
 6ac:	55 c0       	rjmp	.+170    	; 0x758 <Selector_Set+0xc6>
 6ae:	08 95       	ret
	{
		
		case 0:
	Dio_PinWrite(B,0,PinLow);
 6b0:	40 e0       	ldi	r20, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,6,PinLow);
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	66 e0       	ldi	r22, 0x06	; 6
 6be:	83 e0       	ldi	r24, 0x03	; 3
 6c0:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,2,PinLow);
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	83 e0       	ldi	r24, 0x03	; 3
 6ca:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
    ADC_ReadChannel(0,&Thumb_Value);   
 6ce:	68 e6       	ldi	r22, 0x68	; 104
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_ReadChannel>
		break;
 6d8:	08 95       	ret
	
	
	    case 1:
	Dio_PinWrite(B,0,PinHigh);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,6,PinLow);
 6e4:	40 e0       	ldi	r20, 0x00	; 0
 6e6:	66 e0       	ldi	r22, 0x06	; 6
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,2,PinLow);
 6ee:	40 e0       	ldi	r20, 0x00	; 0
 6f0:	62 e0       	ldi	r22, 0x02	; 2
 6f2:	83 e0       	ldi	r24, 0x03	; 3
 6f4:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	ADC_ReadChannel(0,&Index_Value);
 6f8:	66 e6       	ldi	r22, 0x66	; 102
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_ReadChannel>
		break;
 702:	08 95       	ret
	
	
	    case 2:
	Dio_PinWrite(B,0,PinLow);
 704:	40 e0       	ldi	r20, 0x00	; 0
 706:	60 e0       	ldi	r22, 0x00	; 0
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,6,PinHigh);
 70e:	41 e0       	ldi	r20, 0x01	; 1
 710:	66 e0       	ldi	r22, 0x06	; 6
 712:	83 e0       	ldi	r24, 0x03	; 3
 714:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,2,PinLow);
 718:	40 e0       	ldi	r20, 0x00	; 0
 71a:	62 e0       	ldi	r22, 0x02	; 2
 71c:	83 e0       	ldi	r24, 0x03	; 3
 71e:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
    ADC_ReadChannel(0,&Middle_Value);
 722:	64 e6       	ldi	r22, 0x64	; 100
 724:	70 e0       	ldi	r23, 0x00	; 0
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_ReadChannel>
		break;
 72c:	08 95       	ret
	
	   
	    case 3:
	Dio_PinWrite(B,0,PinHigh);
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,6,PinHigh);
 738:	41 e0       	ldi	r20, 0x01	; 1
 73a:	66 e0       	ldi	r22, 0x06	; 6
 73c:	83 e0       	ldi	r24, 0x03	; 3
 73e:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,2,PinLow);
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	ADC_ReadChannel(0,&Ring_Value);
 74c:	62 e6       	ldi	r22, 0x62	; 98
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_ReadChannel>
	    break;
 756:	08 95       	ret
	
	
	    case 4:
	Dio_PinWrite(B,0,PinLow);
 758:	40 e0       	ldi	r20, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
	Dio_PinWrite(D,6,PinLow);
 762:	40 e0       	ldi	r20, 0x00	; 0
 764:	66 e0       	ldi	r22, 0x06	; 6
 766:	83 e0       	ldi	r24, 0x03	; 3
 768:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
    Dio_PinWrite(D,2,PinHigh);
 76c:	41 e0       	ldi	r20, 0x01	; 1
 76e:	62 e0       	ldi	r22, 0x02	; 2
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	0e 94 4d 01 	call	0x29a	; 0x29a <Dio_PinWrite>
    ADC_ReadChannel(0,&Little_Value);
 776:	60 e6       	ldi	r22, 0x60	; 96
 778:	70 e0       	ldi	r23, 0x00	; 0
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0e 94 6a 00 	call	0xd4	; 0xd4 <ADC_ReadChannel>
 780:	08 95       	ret

00000782 <Sign_Read>:
uint8 String14[]={"I am not sure"};	


void Sign_Read()
{
	for(i=0;i<5;i++)
 782:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <i>
 786:	4d c0       	rjmp	.+154    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
	 switch(i)
 788:	82 30       	cpi	r24, 0x02	; 2
 78a:	19 f1       	breq	.+70     	; 0x7d2 <Sign_Read+0x50>
 78c:	28 f4       	brcc	.+10     	; 0x798 <Sign_Read+0x16>
 78e:	88 23       	and	r24, r24
 790:	41 f0       	breq	.+16     	; 0x7a2 <Sign_Read+0x20>
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	91 f0       	breq	.+36     	; 0x7ba <Sign_Read+0x38>
 796:	40 c0       	rjmp	.+128    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 798:	83 30       	cpi	r24, 0x03	; 3
 79a:	39 f1       	breq	.+78     	; 0x7ea <Sign_Read+0x68>
 79c:	84 30       	cpi	r24, 0x04	; 4
 79e:	89 f1       	breq	.+98     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7a0:	3b c0       	rjmp	.+118    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	 {	 
	   case 0:
	 Selector_Set(Thumb) ;
 7a2:	80 e0       	ldi	r24, 0x00	; 0
 7a4:	0e 94 49 03 	call	0x692	; 0x692 <Selector_Set>
	 U16HEX2String(Thumb_Value,Thumb_String);
 7a8:	60 e7       	ldi	r22, 0x70	; 112
 7aa:	70 e0       	ldi	r23, 0x00	; 0
 7ac:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Thumb_Value>
 7b0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Thumb_Value+0x1>
 7b4:	0e 94 67 04 	call	0x8ce	; 0x8ce <U16HEX2String>
	   break;
 7b8:	2f c0       	rjmp	.+94     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	 
	   case 1:
     Selector_Set(Index);
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	0e 94 49 03 	call	0x692	; 0x692 <Selector_Set>
     U16HEX2String(Index_Value,Index_String);
 7c0:	6a e7       	ldi	r22, 0x7A	; 122
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Index_Value>
 7c8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Index_Value+0x1>
 7cc:	0e 94 67 04 	call	0x8ce	; 0x8ce <U16HEX2String>
       break;
 7d0:	23 c0       	rjmp	.+70     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	 
	   case 2: 
     Selector_Set(Middle);
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	0e 94 49 03 	call	0x692	; 0x692 <Selector_Set>
     U16HEX2String(Middle_Value,Middle_String);
 7d8:	6b e6       	ldi	r22, 0x6B	; 107
 7da:	70 e0       	ldi	r23, 0x00	; 0
 7dc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Middle_Value>
 7e0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Middle_Value+0x1>
 7e4:	0e 94 67 04 	call	0x8ce	; 0x8ce <U16HEX2String>
       break;
 7e8:	17 c0       	rjmp	.+46     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	  
	   case 3:
     Selector_Set(Ring);
 7ea:	83 e0       	ldi	r24, 0x03	; 3
 7ec:	0e 94 49 03 	call	0x692	; 0x692 <Selector_Set>
     U16HEX2String(Ring_Value,Ring_String);
 7f0:	6f e7       	ldi	r22, 0x7F	; 127
 7f2:	70 e0       	ldi	r23, 0x00	; 0
 7f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Ring_Value>
 7f8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Ring_Value+0x1>
 7fc:	0e 94 67 04 	call	0x8ce	; 0x8ce <U16HEX2String>
	   break;
 800:	0b c0       	rjmp	.+22     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
	
	   case 4:
	 Selector_Set(Little);
 802:	84 e0       	ldi	r24, 0x04	; 4
 804:	0e 94 49 03 	call	0x692	; 0x692 <Selector_Set>
	 U16HEX2String(Little_Value,Little_String);
 808:	65 e7       	ldi	r22, 0x75	; 117
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 810:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 814:	0e 94 67 04 	call	0x8ce	; 0x8ce <U16HEX2String>
uint8 String14[]={"I am not sure"};	


void Sign_Read()
{
	for(i=0;i<5;i++)
 818:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i>
 81c:	8f 5f       	subi	r24, 0xFF	; 255
 81e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <i>
 822:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <i>
 826:	85 30       	cpi	r24, 0x05	; 5
 828:	08 f4       	brcc	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82a:	ae cf       	rjmp	.-164    	; 0x788 <Sign_Read+0x6>
	 Selector_Set(Little);
	 U16HEX2String(Little_Value,Little_String);
	   break;
	 }
	}
}
 82c:	08 95       	ret

0000082e <Sign_Values>:
	}
}

void Sign_Values(void)    //displays values of flex sensors
{
	LCD_Command(ClearDispaly);
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	0e 94 74 02 	call	0x4e8	; 0x4e8 <LCD_Command>
	LCD_Postion(1,1);
 834:	61 e0       	ldi	r22, 0x01	; 1
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_Postion>
	LCD_DataString(Thumb_String);
 83c:	80 e7       	ldi	r24, 0x70	; 112
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_DataString>
	LCD_Postion(1,6);
 844:	66 e0       	ldi	r22, 0x06	; 6
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_Postion>
	LCD_DataString(Index_String);
 84c:	8a e7       	ldi	r24, 0x7A	; 122
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_DataString>
	LCD_Postion(1,11);
 854:	6b e0       	ldi	r22, 0x0B	; 11
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_Postion>
	LCD_DataString(Middle_String);
 85c:	8b e6       	ldi	r24, 0x6B	; 107
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_DataString>
	LCD_Postion(2,1);
 864:	61 e0       	ldi	r22, 0x01	; 1
 866:	82 e0       	ldi	r24, 0x02	; 2
 868:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_Postion>
	LCD_DataString(Ring_String);
 86c:	8f e7       	ldi	r24, 0x7F	; 127
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_DataString>
	LCD_Postion(2,6);
 874:	66 e0       	ldi	r22, 0x06	; 6
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <LCD_Postion>
	LCD_DataString(Little_String);
 87c:	85 e7       	ldi	r24, 0x75	; 117
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_DataString>
 884:	08 95       	ret

00000886 <Sign_ClearAll>:
}

void Sign_ClearAll()
{
	Thumb_String[0]=0;
 886:	e0 e7       	ldi	r30, 0x70	; 112
 888:	f0 e0       	ldi	r31, 0x00	; 0
 88a:	10 82       	st	Z, r1
	Thumb_String[1]=0;
 88c:	11 82       	std	Z+1, r1	; 0x01
	Thumb_String[2]=0;
 88e:	12 82       	std	Z+2, r1	; 0x02
	Thumb_String[3]=0;
 890:	13 82       	std	Z+3, r1	; 0x03
	Thumb_String[4]=0;
 892:	14 82       	std	Z+4, r1	; 0x04
	
	Middle_String[0]=0;
 894:	eb e6       	ldi	r30, 0x6B	; 107
 896:	f0 e0       	ldi	r31, 0x00	; 0
 898:	10 82       	st	Z, r1
	Middle_String[1]=0;
 89a:	11 82       	std	Z+1, r1	; 0x01
	Middle_String[2]=0;
 89c:	12 82       	std	Z+2, r1	; 0x02
	Middle_String[3]=0;
 89e:	13 82       	std	Z+3, r1	; 0x03
	Middle_String[4]=0;
 8a0:	14 82       	std	Z+4, r1	; 0x04
	
	Index_String[0]=0;
 8a2:	ea e7       	ldi	r30, 0x7A	; 122
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	10 82       	st	Z, r1
	Index_String[1]=0;
 8a8:	11 82       	std	Z+1, r1	; 0x01
	Index_String[2]=0;
 8aa:	12 82       	std	Z+2, r1	; 0x02
	Index_String[3]=0;
 8ac:	13 82       	std	Z+3, r1	; 0x03
	Index_String[4]=0;
 8ae:	14 82       	std	Z+4, r1	; 0x04

	Ring_String[0]=0;
 8b0:	ef e7       	ldi	r30, 0x7F	; 127
 8b2:	f0 e0       	ldi	r31, 0x00	; 0
 8b4:	10 82       	st	Z, r1
	Ring_String[1]=0;
 8b6:	11 82       	std	Z+1, r1	; 0x01
	Ring_String[2]=0;
 8b8:	12 82       	std	Z+2, r1	; 0x02
	Ring_String[3]=0;
 8ba:	13 82       	std	Z+3, r1	; 0x03
	Ring_String[4]=0;
 8bc:	14 82       	std	Z+4, r1	; 0x04
	
	Little_String[0]=0;
 8be:	e5 e7       	ldi	r30, 0x75	; 117
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	10 82       	st	Z, r1
	Little_String[1]=0;
 8c4:	11 82       	std	Z+1, r1	; 0x01
	Little_String[2]=0;
 8c6:	12 82       	std	Z+2, r1	; 0x02
	Little_String[3]=0;
 8c8:	13 82       	std	Z+3, r1	; 0x03
	Little_String[4]=0;
 8ca:	14 82       	std	Z+4, r1	; 0x04
 8cc:	08 95       	ret

000008ce <U16HEX2String>:
	
	return OK;
}

ReturnValueType U16HEX2String (uint16 HEX,uint8 string[5])
{
 8ce:	dc 01       	movw	r26, r24
	string[4]= 0;
 8d0:	fb 01       	movw	r30, r22
 8d2:	14 82       	std	Z+4, r1	; 0x04
	uint8 i = 0 ;
	for (i=0 ; i <= 3 ; i++ )
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	26 c0       	rjmp	.+76     	; 0x924 <U16HEX2String+0x56>
	{
		if ((( HEX >> (i*4) ) & 0x000F) > 9)
 8d8:	49 2f       	mov	r20, r25
 8da:	50 e0       	ldi	r21, 0x00	; 0
 8dc:	9a 01       	movw	r18, r20
 8de:	22 0f       	add	r18, r18
 8e0:	33 1f       	adc	r19, r19
 8e2:	22 0f       	add	r18, r18
 8e4:	33 1f       	adc	r19, r19
 8e6:	fd 01       	movw	r30, r26
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <U16HEX2String+0x20>
 8ea:	f6 95       	lsr	r31
 8ec:	e7 95       	ror	r30
 8ee:	2a 95       	dec	r18
 8f0:	e2 f7       	brpl	.-8      	; 0x8ea <U16HEX2String+0x1c>
 8f2:	9f 01       	movw	r18, r30
 8f4:	ef 70       	andi	r30, 0x0F	; 15
 8f6:	ff 27       	eor	r31, r31
 8f8:	3a 97       	sbiw	r30, 0x0a	; 10
 8fa:	50 f0       	brcs	.+20     	; 0x910 <U16HEX2String+0x42>
		{
			string[3-i] = (( HEX >> (i*4) ) & 0x000F) - 0x0A + 'A' ;
 8fc:	e3 e0       	ldi	r30, 0x03	; 3
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	e4 1b       	sub	r30, r20
 902:	f5 0b       	sbc	r31, r21
 904:	e6 0f       	add	r30, r22
 906:	f7 1f       	adc	r31, r23
 908:	2f 70       	andi	r18, 0x0F	; 15
 90a:	29 5c       	subi	r18, 0xC9	; 201
 90c:	20 83       	st	Z, r18
 90e:	09 c0       	rjmp	.+18     	; 0x922 <U16HEX2String+0x54>
		}
		else
		{
			string[3-i] =(( HEX >> (i*4) ) & 0x000F) + '0' ;
 910:	e3 e0       	ldi	r30, 0x03	; 3
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	e4 1b       	sub	r30, r20
 916:	f5 0b       	sbc	r31, r21
 918:	e6 0f       	add	r30, r22
 91a:	f7 1f       	adc	r31, r23
 91c:	2f 70       	andi	r18, 0x0F	; 15
 91e:	20 5d       	subi	r18, 0xD0	; 208
 920:	20 83       	st	Z, r18

ReturnValueType U16HEX2String (uint16 HEX,uint8 string[5])
{
	string[4]= 0;
	uint8 i = 0 ;
	for (i=0 ; i <= 3 ; i++ )
 922:	9f 5f       	subi	r25, 0xFF	; 255
 924:	94 30       	cpi	r25, 0x04	; 4
 926:	c0 f2       	brcs	.-80     	; 0x8d8 <U16HEX2String+0xa>
		{
			string[3-i] =(( HEX >> (i*4) ) & 0x000F) + '0' ;
		}
	}
	return OK;
}
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	08 95       	ret

0000092c <_exit>:
 92c:	f8 94       	cli

0000092e <__stop_program>:
 92e:	ff cf       	rjmp	.-2      	; 0x92e <__stop_program>
